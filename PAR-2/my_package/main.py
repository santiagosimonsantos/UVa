#Simon Santos, Santiago. Grupo de teoria: T2; Grupo de laboratorio : X5.
#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.4 on Mon May 16 12:16:47 2022
#
from wx import adv
import wx, my_package.Practica1 as Practica1, random

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER ^ wx.MAXIMIZE_BOX
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((690, 690))
        self.SetTitle("Santiago Simon Santos - Paradigmas de Programacion")
        self.records, self.max_level = Practica1.unlocked_levels()  #Definimos algunos parametros iniciales
        self.frames_timer = wx.Timer(self)
        self.timer = wx.Timer(self)
        self.cars = []
        self.choices = []
        for i in range(len(self.records)):
            self.choices.append("Level " + str(i+1) + " - Record: " + str(self.records[i]))
        if len(self.records) < self.max_level:
            self.choices.append("Level " + str(len(self.records)+1) + " - Unklocked")
        self.play = 0

        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_2, 0, wx.ALL, 10)

        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(sizer_5, 0, 0, 0)

        sizer_6 = wx.StaticBoxSizer(wx.StaticBox(self.panel_1, wx.ID_ANY, " Levels "), wx.HORIZONTAL)
        sizer_5.Add(sizer_6, 0, 0, 0)

        self.list_box = wx.ListBox(self.panel_1, wx.ID_ANY, choices=self.choices)
        self.list_box.SetMinSize((125, 300))
        sizer_6.Add(self.list_box, 0, 0, 0)

        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_5.Add(sizer_7, 0, wx.EXPAND | wx.TOP, 10)

        self.select_button = wx.Button(self.panel_1, wx.ID_ANY, "Select")
        self.select_button.SetMinSize((125, 50))
        self.select_button.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        self.select_button.Enable(False)
        sizer_7.Add(self.select_button, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.BOTTOM, 10)

        self.undo_button = wx.Button(self.panel_1, wx.ID_ANY, "Undo")
        self.undo_button.SetMinSize((125, 50))
        self.undo_button.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        self.undo_button.Enable(False)
        sizer_7.Add(self.undo_button, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(sizer_8, 0, wx.EXPAND, 0)

        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_8.Add(sizer_9, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.LEFT, 15)

        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9.Add(sizer_10, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        sizer_11 = wx.StaticBoxSizer(wx.StaticBox(self.panel_1, wx.ID_ANY, " Level "), wx.VERTICAL)
        sizer_10.Add(sizer_11, 0, 0, 0)

        self.level_label = wx.StaticText(self.panel_1, wx.ID_ANY, "--", style=wx.ALIGN_CENTER_HORIZONTAL)
        self.level_label.SetMinSize((100, 100))
        self.level_label.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.level_label.SetFont(wx.Font(60, wx.FONTFAMILY_SCRIPT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_11.Add(self.level_label, 0, 0, 0)

        sizer_12 = wx.StaticBoxSizer(wx.StaticBox(self.panel_1, wx.ID_ANY, " Record "), wx.VERTICAL)
        sizer_10.Add(sizer_12, 0, wx.LEFT | wx.RIGHT, 35)

        self.record_label = wx.StaticText(self.panel_1, wx.ID_ANY, "--", style=wx.ALIGN_CENTER_HORIZONTAL)
        self.record_label.SetMinSize((100, 100))
        self.record_label.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.record_label.SetFont(wx.Font(60, wx.FONTFAMILY_SCRIPT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_12.Add(self.record_label, 0, wx.LEFT | wx.RIGHT, 0)

        sizer_13 = wx.StaticBoxSizer(wx.StaticBox(self.panel_1, wx.ID_ANY, " Time "), wx.VERTICAL)
        sizer_10.Add(sizer_13, 0, 0, 0)

        self.time_label = wx.StaticText(self.panel_1, wx.ID_ANY, "--", style=wx.ALIGN_CENTER_HORIZONTAL)
        self.time_label.SetMinSize((100, 100))
        self.time_label.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.time_label.SetFont(wx.Font(60, wx.FONTFAMILY_SCRIPT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_13.Add(self.time_label, 0, 0, 0)

        self.bg = wx.Panel(self.panel_1, wx.ID_ANY)
        self.bg.SetMinSize((480, 480))
        self.bg.SetBackgroundColour(wx.Colour(75, 75, 75))
        sizer_9.Add(self.bg, 0, wx.TOP, 15)
        for i in range(8):
            for j in range(8):
                if i == 0 or (i == 7 and j != 3)or j == 0 or j == 7:
                    wall = wx.BitmapButton(self.bg, wx.ID_ANY, wx.Bitmap("img/muro.png", wx.BITMAP_TYPE_ANY), style=wx.NO_BORDER)
                    wall.SetSize((60,60))
                    wall.SetPosition((i*60, j*60))
        self.Bind(wx.EVT_TIMER, self.OnTimer, self.timer)
        self.Bind(wx.EVT_TIMER, self.frames_move, self.frames_timer)
        self.Bind(wx.EVT_BUTTON, self.select_level, self.select_button)
        self.Bind(wx.EVT_BUTTON, self.undo, self.undo_button)
        self.Bind(wx.EVT_LISTBOX, self.ListBoxChanges, self.list_box)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        # end wxGlade


    def ListBoxChanges(self, event): #nos devuleve el nivel seleccionado
        self.level = int(self.list_box.GetSelection())
        self.select_button.Enable(True)
        self.level_label.SetLabel(str(self.level + 1))
        if self.level == len(self.records):
            self.record_label.SetLabel("--")
        else:
            self.record_label.SetLabel(str(self.records[self.level]))
        self.time_label.SetLabel("--")
        self.start_level()

    def OnTimer (self, envent): #el contador de tiempo
        self.count -= 1
        self.time_label.SetLabel(str(self.count))
        if self.count == 0:
            #mostrar venana con el mensaje has gandado
            self.timer.Stop()
            for i in range(len(self.cars)):
                self.cars[i].Enable(False)
            self.play = 0
            self.select_button.SetLabel("Select")
            self.undo_button.Enable(False)
            self.time_label.SetLabel(str(self.count))
            self.list_box.Enable(True)
            wx.adv.Sound("sound/lose.wav").Play()
            wx.MessageBox("You lose", "Next time maybe", wx.OK | wx.ICON_INFORMATION)

    def select_level (self, event): #elegimos el nivel
            self.count = 90
            self.time_label.SetLabel("90")
            self.level_label.SetLabel(str(self.level+1))
            if self.level < len(self.records):
                self.record_label.SetLabel(str(self.records[self.level]))
            else:
                self.record_label.SetLabel("--")
            for i in range(len(self.cars)):
                self.cars[i].Enable(True)
            self.select_button.Enable(False)
            self.list_box.Enable(False)
            self.timer.Start(1000)

    def start_level(self): #ponemos los autos en la posicion inicial
        self.last_position = []
        if len(self.cars) > 0:
            for i in range(len(self.cars)):
                self.cars[i].Destroy()
        self.cars = []
        self.cars_data = Practica1.level_reader(self.level)
        for i in range(len(self.cars_data)):
            if i == 0:
                img = "img/car.png"
            else:
                img = "img/car" + self.cars_data[i].orientation + str(self.cars_data[i].length) + "_" + str(random.randint(0, 9)) + ".png"
            car = wx.BitmapButton(self.bg, wx.ID_ANY, wx.Bitmap(img, wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE)
            car.SetBackgroundColour(wx.Colour(37+i*5, 37+i*5, 37+i*5))
            car.index = i
            if self.cars_data[i].orientation == "H":
                car.SetSize((self.cars_data[i].length*60, 60))
            else:
                car.SetSize((60, self.cars_data[i].length*60))
            car.SetPosition((self.cars_data[i].x, self.cars_data[i].y))
            car.Enable(False)
            car.Bind(wx.EVT_LEFT_DOWN, self.click_move)
            car.Bind(wx.EVT_LEFT_UP, self.release_move)
            self.cars.append(car)

    def CheckColiderH(self):    #Creamos el colider de los coches horizontales
        car_colision_x = 0
        colision = False
        for i in range(len(self.cars)):
            if i != self.index:
                if self.cars_data[i].orientation == "H":
                    if self.cars_data[i].y == self.cars_data[self.index].y:
                        if self.cars_data[i].x < self.cars_data[self.index].x:
                            if self.cars_data[i].x + self.cars_data[i].length * 60 > self.move:
                                self.move = self.cars_data[i].x + self.cars_data[i].length * 60
                                car_colision_x = self.cars_data[i].x
                                colision = True
                            elif car_colision_x < self.cars_data[i].x:
                                colision = False
                        else:
                            if self.cars_data[i].x < self.move+ self.cars_data[self.index].length * 60:
                                self.move = self.cars_data[i].x - self.cars_data[self.index].length * 60
                                car_colision_x = self.cars_data[i].x
                                colision = True
                            elif car_colision_x > self.cars_data[i].x:
                                colision = False
                else:
                    if self.cars_data[i].y + self.cars_data[i].length * 60 > self.cars_data[self.index].y and self.cars_data[i].y < self.cars_data[self.index].y + 60:
                        if self.cars_data[i].x + 59 < self.cars_data[self.index].x:
                            if self.cars_data[i].x + 60 > self.move:
                                self.move = self.cars_data[i].x + 60
                                car_colision_x = self.cars_data[i].x
                                colision = True
                            elif car_colision_x < self.cars_data[i].x:
                                colision = False
                        else:
                            if self.cars_data[i].x < self.move + self.cars_data[self.index].length * 60:
                                self.move = self.cars_data[i].x - self.cars_data[self.index].length * 60
                                car_colision_x = self.cars_data[i].x
                                colision = True
                            elif car_colision_x > self.cars_data[i].x: #Comprobamos si la posicion del coche
                                colision = False
        if colision == True:
            return False
        else:
            return True

    def CheckColiderV(self): #Creamos el colider de los coches vericales
        car_colision_y = 0
        colision = False
        for i in range(len(self.cars)):
            if i != self.index:
                if self.cars_data[i].orientation == "V":
                    if self.cars_data[i].x == self.cars_data[self.index].x:
                        if self.cars_data[i].y < self.cars_data[self.index].y:
                            if self.cars_data[i].y + self.cars_data[i].length * 60 > self.move:
                                self.move = self.cars_data[i].y + self.cars_data[i].length * 60
                                car_colision_y = self.cars_data[i].y
                                colision = True
                            elif car_colision_y < self.cars_data[i].y:
                                colision = False
                        else:
                            if self.cars_data[i].y < self.move+ self.cars_data[self.index].length * 60:
                                self.move = self.cars_data[i].y - self.cars_data[self.index].length * 60
                                car_colision_y = self.cars_data[i].y
                                colision = True
                            elif car_colision_y > self.cars_data[i].y:
                                colision = False
                else:
                    if self.cars_data[i].x + self.cars_data[i].length * 60 > self.cars_data[self.index].x and self.cars_data[i].x < self.cars_data[self.index].x + 60:
                        if self.cars_data[i].y + 59 < self.cars_data[self.index].y:
                            if self.cars_data[i].y + 60 > self.move:
                                self.move = self.cars_data[i].y + 60
                                car_colision_y = self.cars_data[i].y
                                colision = True
                            elif car_colision_y < self.cars_data[i].y:
                                colision = False
                        else:
                            if self.cars_data[i].y < self.move + self.cars_data[self.index].length * 60:
                                self.move = self.cars_data[i].y - self.cars_data[self.index].length * 60
                                car_colision_y = self.cars_data[i].y
                                colision = True
                            elif car_colision_y > self.cars_data[i].y:
                                colision = False
        if colision == True:
            return False
        else:
            return True

    def frames_move(self, event): #Movimiento de los coches
        if self.cars_data[self.index].orientation == "H":
            if wx.GetMousePosition()[1] - self.GetScreenPosition()[1] -178 > self.cars_data[self.index].y and wx.GetMousePosition()[1] - self.GetScreenPosition()[1] -178 < self.cars_data[self.index].y + 60 and wx.GetMousePosition()[0] - self.GetScreenPosition()[0] -168> self.cars_data[self.index].x and wx.GetMousePosition()[0] - self.GetScreenPosition()[0] -168 < self.cars_data[self.index].x + self.cars_data[self.index].length*60:
                self.move = wx.GetMousePosition()[0]-self.GetScreenPosition()[0]-self.relative_pos
                if self.move != self.cars_data[self.index].x:
                    if self.CheckColiderH() == True:
                        if self.move + self.cars_data[self.index].length*60 >= 480 and self.index == 0:
                            self.move = 480 - self.cars_data[self.index].length*60
                            self.cars[self.index].Move((480 - self.cars_data[self.index].length*60, self.cars_data[self.index].y))
                            self.EndGame()
                        elif self.move < 60:
                            self.move = 60
                            self.cars_data[self.index].x = self.move
                            self.cars[self.index].Move((self.move, self.cars_data[self.index].y))
                        elif self.move + self.cars_data[self.index].length*60 >= 420 and self.index != 0:
                            self.move = 420 - self.cars_data[self.index].length*60
                            self.cars_data[self.index].x = self.move
                            self.cars[self.index].Move((self.move, self.cars_data[self.index].y))
                        else:
                            self.cars_data[self.index].x = self.move
                            self.cars[self.index].Move((self.move, self.cars_data[self.index].y))
                    else:
                        self.cars_data[self.index].x = self.move
                        self.cars[self.index].Move((self.move, self.cars_data[self.index].y))
            else:
                self.frames_timer.Stop()
                self.CheckUndo()
        else:
            if wx.GetMousePosition()[0] - self.GetScreenPosition()[0] -168> self.cars_data[self.index].x and wx.GetMousePosition()[0] - self.GetScreenPosition()[0] -168 < self.cars_data[self.index].x + 60 and wx.GetMousePosition()[1] - self.GetScreenPosition()[1] -178 > self.cars_data[self.index].y and wx.GetMousePosition()[1] - self.GetScreenPosition()[1] -178 < self.cars_data[self.index].y + self.cars_data[self.index].length*60 :
                self.move = wx.GetMousePosition()[1]-self.GetScreenPosition()[1]-self.relative_pos
                if self.move != self.cars_data[self.index].y:
                    if self.CheckColiderV() == True:
                        if self.move < 60:
                            self.move = 60
                            self.cars_data[self.index].y = 60
                            self.cars[self.index].Move((self.cars_data[self.index].x, self.move))
                        elif self.move + self.cars_data[self.index].length*60 > 420:
                            self.move = 420 - self.cars_data[self.index].length*60
                            self.cars_data[self.index].y = self.move
                            self.cars[self.index].Move((self.cars_data[self.index].x, self.move))
                        else:
                            self.cars_data[self.index].y= self.move
                            self.cars[self.index].Move((self.cars_data[self.index].x, self.move))
                    else:
                        self.cars_data[self.index].y = self.move
                        self.cars[self.index].Move((self.cars_data[self.index].x, self.move))
            else:
                self.frames_timer.Stop()
                self.CheckUndo()

    def click_move(self, event): # captamos el click del mouse y seteamos su posicion relativa al coche
        car = event.GetEventObject()
        self.index = car.index
        self.old_position = car.GetPosition()
        if self.cars_data[car.index].orientation == "H":
            self.relative_pos = wx.GetMousePosition()[0] - self.GetScreenPosition()[0] - car.GetPosition()[0]
        else:
            self.relative_pos = wx.GetMousePosition()[1] - self.GetScreenPosition()[1] - car.GetPosition()[1]
        self.frames_timer.Start(1)

    def CheckUndo(self):    # chequeamos si se puede deshacer
        if self.cars_data[self.index].orientation == "H":
            if self.old_position[0] != self.move and self.move >= 60 and self.move <= 420:
                self.last_position.append([self.index,self.old_position])
                self.undo_button.Enable(True)
        else:
            if self.old_position[1] != self.move and self.move >= 60 and self.move <= 420:
                self.last_position.append([self.index,self.old_position])
                self.undo_button.Enable(True)


    def release_move(self, event): # captamos el release del click del mouse y paramos el movimiento
        self.CheckUndo()
        event.Skip()
        self.frames_timer.Stop()

    def undo(self, event): # deshacemos el ultimo movimiento
        index, position = self.last_position.pop()
        if self.cars_data[index].orientation == "H":
            self.cars_data[index].x= position[0]
            self.cars[index].Move(position[0], self.cars_data[index].y)
        else:
            self.cars_data[index].y= position[1]
            self.cars[index].Move(self.cars_data[index].x, position[1])
        if len(self.last_position) == 0:
            self.undo_button.Enable(False)

    def EndGame(self): # steamos las variables de final de juego
        self.timer.Stop()
        self.frames_timer.Stop()
        self.undo_button.Enable(False)
        for i in range(len(self.cars)):
            self.cars[i].Enable(False)
        self.select_button.SetLabel("Select")
        self.list_box.Enable(True)
        data = ""
        if len(self.records) == self.level :
            self.records.append(self.count)
            self.choices[self.level] = "Level " + str(self.level+1) + " - Record: " + str(self.count)
            if self.level + 1 < self.max_level:
                self.choices.append("Level " + str(len(self.records) + 1) + " - Unklocked")
        elif int(self.records[self.level]) < self.count:
            self.records[self.level] = str(self.count)
            self.choices[self.level] = "Level " + str(self.level+1) + " - Record: " + str(self.count)
        for i in range(len(self.records)):
            data += str(self.records[i]) + " "
        with open("records.txt", "w") as f:
            f.write(data)
            f.truncate()
        self.record_label.SetLabel(str(self.records[self.level]))
        self.list_box.Set(self.choices)
        wx.adv.Sound("sound/win.wav").Play()
        wx.MessageBox("You win", "Congratulations", wx.OK | wx.ICON_INFORMATION)

# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        wx.MessageBox("Welcome to Parking, select a level to start", "Start info", wx.OK | wx.ICON_INFORMATION)
        return True

# end of class MyApp

def main():
    app = MyApp(0)
    app.MainLoop()

if __name__ == "__main__":
    main()